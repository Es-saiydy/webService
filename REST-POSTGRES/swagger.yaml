openapi: 3.0.3
info:
  title: API de gestion de produits, utilisateurs, commandes et avis
  description: Une API REST pour gérer des produits, utilisateurs, commandes, avis et récupérer des jeux gratuits.
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Serveur local
paths:
  /:
    get:
      summary: Page d'accueil
      description: Retourne un message de bienvenue.
      responses:
        '200':
          description: Message de bienvenue
          content:
            application/json:
              schema:
                type: string
                example: Hello World!
  /products:
    get:
      summary: Récupérer tous les produits
      description: Récupère une liste de produits avec pagination et filtres optionnels.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Nombre de produits par page
        - in: query
          name: name
          schema:
            type: string
          description: Filtrer par nom (recherche partielle)
        - in: query
          name: about
          schema:
            type: string
          description: Filtrer par description (recherche partielle)
        - in: query
          name: price
          schema:
            type: number
          description: Filtrer par prix maximum
      responses:
        '200':
          description: Liste des produits
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Créer un produit
      description: Crée un nouveau produit dans la base de données.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProduct'
      responses:
        '201':
          description: Produit créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      summary: Récupérer un produit par ID
      description: Récupère les détails d'un produit spécifique.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID du produit
      responses:
        '200':
          description: Détails du produit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Produit non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Supprimer un produit
      description: Supprime un produit par son ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID du produit
      responses:
        '200':
          description: Produit supprimé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Produit non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users:
    get:
      summary: Récupérer tous les utilisateurs
      description: Récupère une liste d'utilisateurs avec pagination.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Nombre d'utilisateurs par page
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Créer un utilisateur
      description: Crée un nouvel utilisateur avec mot de passe haché.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Utilisateur créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: Conflit (nom d'utilisateur ou email existe)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    put:
      summary: Mettre à jour un utilisateur (complet)
      description: Met à jour toutes les informations d'un utilisateur.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflit (nom d'utilisateur ou email existe)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Mettre à jour un utilisateur (partiel)
      description: Met à jour certaines informations d'un utilisateur.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: Utilisateur mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflit (nom d'utilisateur ou email existe)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Supprimer un utilisateur
      description: Supprime un utilisateur par son ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'utilisateur
      responses:
        '200':
          description: Utilisateur supprimé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    get:
      summary: Récupérer toutes les commandes
      description: Récupère une liste de commandes avec pagination, incluant les détails des utilisateurs et produits.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page
        - in: query
          name: Wlimit
          schema:
            type: integer
            default: 10
          description: Nombre de commandes par page
      responses:
        '200':
          description: Liste des commandes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailedOrder'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Créer une commande
      description: Crée une nouvelle commande avec une liste de produits.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Commande créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Utilisateur non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{id}:
    get:
      summary: Récupérer une commande par ID
      description: Récupère les détails d'une commande spécifique, incluant utilisateur et produits.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de la commande
      responses:
        '200':
          description: Détails de la commande
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedOrder'
        '404':
          description: Commande non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Mettre à jour une commande
      description: Met à jour une commande existante.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de la commande
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '200':
          description: Commande mise à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Commande non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Supprimer une commande
      description: Supprime une commande par son ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de la commande
      responses:
        '200':
          description: Commande supprimée
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
        '404':
          description: Commande non trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reviews:
    get:
      summary: Récupérer tous les avis
      description: Récupère une liste d'avis avec pagination.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Numéro de la page
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Nombre d'avis par page
      responses:
        '200':
          description: Liste des avis
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Créer un avis
      description: Crée un nouvel avis pour un produit.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReview'
      responses:
        '201':
          description: Avis créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Utilisateur ou produit non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /reviews/{id}:
    get:
      summary: Récupérer un avis par ID
      description: Récupère les détails d'un avis spécifique.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'avis
      responses:
        '200':
          description: Détails de l'avis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Avis non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Mettre à jour un avis
      description: Met à jour un avis existant.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'avis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReview'
      responses:
        '200':
          description: Avis mis à jour
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Données invalides
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Avis non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Supprimer un avis
      description: Supprime un avis par son ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID de l'avis
      responses:
        '200':
          description: Avis supprimé
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '404':
          description: Avis non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /f2p-games:
    get:
      summary: Récupérer tous les jeux gratuits
      description: Récupère une liste de jeux gratuits depuis une API externe.
      responses:
        '200':
          description: Liste des jeux
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /f2p-games/{id}:
    get:
      summary: Récupérer un jeu gratuit par ID
      description: Récupère les détails d'un jeu gratuit spécifique.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID du jeu
      responses:
        '200':
          description: Détails du jeu
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Jeu non trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Erreur serveur
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        about:
          type: string
        price:
          type: number
        review_ids:
          type: array
          items:
            type: integer
        total_score:
          type: number
      required:
        - id
        - name
        - about
        - price
    CreateProduct:
      type: object
      properties:
        name:
          type: string
          minLength: 3
        about:
          type: string
          minLength: 10
        price:
          type: number
          minimum: 0
      required:
        - name
        - about
        - price
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
      required:
        - id
        - username
        - email
    CreateUser:
      type: object
      properties:
        username:
          type: string
          minLength: 3
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - username
        - email
        - password
    UpdateUser:
      type: object
      properties:
        username:
          type: string
          minLength: 3
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
    Order:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_ids:
          type: array
          items:
            type: integer
        total:
          type: number
        payment:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - product_ids
        - total
        - payment
    CreateOrder:
      type: object
      properties:
        userId:
          type: integer
          minimum: 1
        productIds:
          type: array
          items:
            type: integer
            minimum: 1
        total:
          type: number
          minimum: 0
        payment:
          type: boolean
      required:
        - userId
        - productIds
        - total
    DetailedOrder:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_ids:
          type: array
          items:
            type: integer
        total:
          type: number
        payment:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
        - id
        - user_id
        - product_ids
        - total
        - payment
        - user
        - products
    Review:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        product_id:
          type: integer
        score:
          type: integer
          minimum: 1
          maximum: 5
        content:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - product_id
        - score
        - content
    CreateReview:
      type: object
      properties:
        userId:
          type: integer
          minimum: 1
        productId:
          type: integer
          minimum: 1
        score:
          type: integer
          minimum: 1
          maximum: 5
        content:
          type: string
          minLength: 1
      required:
        - userId
        - productId
        - score
        - content
    Error:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
      required:
        - message
    ValidationError:
      type: array
      items:
        type: object
        properties:
          code:
            type: string
          expected:
            type: string
          received:
            type: string
          path:
            type: array
            items:
              type: string
          message:
            type: string